<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zwwhnly.mybatisaction.mapper.SysUserMapper">
    <resultMap id="sysUserMap" type="com.zwwhnly.mybatisaction.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>
    <resultMap id="userRoleMap" type="com.zwwhnly.mybatisaction.model.SysUserExtend" extends="sysUserMap">
        <!--<id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>-->
        <!--role相关属性-->
        <!--<result property="sysRole.id" column="role_id"/>
        <result property="sysRole.roleName" column="role_role_name"/>
        <result property="sysRole.enabled" column="role_enabled"/>
        <result property="sysRole.createBy" column="role_create_by"/>
        <result property="sysRole.createTime" column="role_create_time" jdbcType="TIMESTAMP"/>-->
        <association property="sysRole" columnPrefix="role_"
                     resultMap="com.zwwhnly.mybatisaction.mapper.SysRoleMapper.roleMap"/>
        <!--<association property="sysRole" columnPrefix="role_" javaType="com.zwwhnly.mybatisaction.model.SysRole">
            <result property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </association>-->
    </resultMap>
    <resultMap id="userRoleMapSelect" type="com.zwwhnly.mybatisaction.model.SysUserExtend" extends="sysUserMap">
        <association property="sysRole"
                     fetchType="lazy"
                     select="com.zwwhnly.mybatisaction.mapper.SysRoleMapper.selectRoleById"
                     column="{id=role_id}"/>
    </resultMap>
    <resultMap id="userRoleListMap" type="com.zwwhnly.mybatisaction.model.SysUserExtend" extends="sysUserMap">
        <!--<collection property="sysRoleList" columnPrefix="role_"
                    resultMap="com.zwwhnly.mybatisaction.mapper.SysRoleMapper.roleMap">
        </collection>-->
        <collection property="sysRoleList" columnPrefix="role_"
                    resultMap="com.zwwhnly.mybatisaction.mapper.SysRoleMapper.rolePrivilegeListMap">
        </collection>
    </resultMap>
    <resultMap id="userRoleListMapSelect" extends="sysUserMap"
               type="com.zwwhnly.mybatisaction.model.SysUserExtend">
        <collection property="sysRoleList" fetchType="lazy"
                    select="com.zwwhnly.mybatisaction.mapper.SysRoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <select id="selectById" resultMap="sysUserMap">
        SELECT id, user_name, user_password, user_email, create_time FROM sys_user WHERE id = #{id}
    </select>
    <select id="selectAll" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
               user_name,
               user_password,
               user_email,
               user_info,
               head_img,
               create_time
        FROM sys_user
    </select>
    <select id="selectRolesByUserId" resultType="com.zwwhnly.mybatisaction.model.SysRoleExtend">
        SELECT r.id,
               r.role_name   roleName,
               r.enabled,
               r.create_by   createBy,
               r.create_time createTime,
               u.user_name   "sysUser.userName",
               u.user_email   "sysUser.userEmail"
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{userId}
    </select>
    <insert id="insert">
        INSERT INTO sys_user(id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertUseGeneratedKeys" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertUseSelectKey">
        INSERT INTO sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES
        (#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateById">
        UPDATE sys_user
        SET user_name = #{userName},
            user_password = #{userPassword},
            user_email = #{userEmail},
            user_info = #{userInfo},
            head_img = #{headImg,jdbcType=BLOB},
            create_time = #{createTime,jdbcType=TIMESTAMP}
        WHERE id = #{id}
    </update>
    <delete id="deleteById">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>
    <delete id="deleteBySysUser">
        DELETE FROM sys_user WHERE id = #{id}
    </delete>
    <select id="selectRolesByUserIdAndRoleEnabled" resultType="com.zwwhnly.mybatisaction.model.SysRole">
        SELECT r.id,
               r.role_name   roleName,
               r.enabled,
               r.create_by   createBy,
               r.create_time createTime
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{userId} AND r.enabled = #{enabled}
    </select>
    <select id="selectRolesByUserAndRole" resultType="com.zwwhnly.mybatisaction.model.SysRole">
        SELECT r.id,
        r.role_name   roleName,
        r.enabled,
        r.create_by   createBy,
        r.create_time createTime
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{user.id} AND r.enabled = #{role.enabled}
    </select>
    <select id="selectByUser" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        create_time
        FROM sys_user
        WHERE 1 = 1
        <if test="userName != null and userName != ''">
            AND user_name LIKE CONCAT('%',#{userName},'%')
        </if>
        <if test="userEmail != null and userEmail != ''">
            AND user_email = #{userEmail}
        </if>
    </select>
    <select id="selectByUserWhere" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        create_time
        FROM sys_user
        <where>
            <if test="userName != null and userName != ''">
                AND user_name LIKE CONCAT('%',#{userName},'%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                AND user_email = #{userEmail}
            </if>
        </where>
    </select>
    <update id="updateByIdSelective">
        UPDATE sys_user
        SET
        <if test="userName != null and userName != ''">
            user_name = #{userName},
        </if>
        <if test="userPassword != null and userPassword != ''">
            user_password = #{userPassword},
        </if>
        <if test="userEmail != null and userEmail != ''">
            user_email = #{userEmail},
        </if>
        <if test="userInfo != null and userInfo != ''">
            user_info = #{userInfo},
        </if>
        <if test="headImg != null">
            head_img = #{headImg,jdbcType=BLOB},
        </if>
        <if test="createTime != null">
            create_time = #{createTime,jdbcType=TIMESTAMP},
        </if>
        id = #{id}
        WHERE id = #{id}
    </update>
    <update id="updateByIdSelectiveSet">
        UPDATE sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg,jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        WHERE id = #{id}
    </update>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(user_name, user_password,
        <if test="userEmail != null and userEmail != ''">
            user_email,
        </if>
        user_info, head_img, create_time)
        VALUES (#{userName},#{userPassword},
        <if test="userEmail != null and userEmail != ''">
            #{userEmail},
        </if>
        #{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP})
    </insert>
    <select id="selectByIdOrUserName" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        create_time
        FROM sys_user
        WHERE 1 = 1
        <choose>
            <when test="id != null">
                AND id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                AND user_name = #{userName}
            </when>
            <otherwise>
                AND 1 = 2
            </otherwise>
        </choose>
    </select>
    <select id="selectByIdList" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        create_time
        FROM sys_user
        WHERE id IN
        <foreach collection="idList" open="(" close=")" separator=","
                 item="id" index="i">
            #{id}
        </foreach>
    </select>
    <select id="selectByIdArray" resultType="com.zwwhnly.mybatisaction.model.SysUser">
        SELECT id,
        user_name,
        user_password,
        user_email,
        create_time
        FROM sys_user
        WHERE id IN
        <foreach collection="idArray" open="(" close=")" separator=","
                 item="id" index="i">
            #{id}
        </foreach>
    </select>
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user(user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (#{user.userName},#{user.userPassword},#{user.userEmail},#{user.userInfo},#{user.headImg,jdbcType=BLOB},#{user.createTime,jdbcType=TIMESTAMP})
        </foreach>
    </insert>
    <update id="updateByMap">
        UPDATE sys_user
        SET
        <foreach collection="userMap" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        WHERE id = #{userMap.id}
    </update>
    <select id="selectUserAndRoleById" resultType="com.zwwhnly.mybatisaction.model.SysUserExtend">
        SELECT u.id,
               u.user_name userName,
               u.user_password userPassword,
               u.user_email userEmail,
               u.create_time createTime,
               r.id "sysRole.id",
               r.role_name   "sysRole.roleName",
               r.enabled "sysRole.enabled",
               r.create_by   "sysRole.createBy",
               r.create_time "sysRole.createTime"
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>
    <select id="selectUserAndRoleByIdResultMap" resultMap="userRoleMap">
        SELECT  u.id,
                u.user_name,
                u.user_password,
                u.user_email,
                u.create_time,
                r.id role_id,
                r.role_name role_role_name,
                r.enabled role_enabled,
                r.create_by role_create_by,
                r.create_time role_create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        WHERE u.id = #{id}
    </select>
    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
        SELECT  u.id,
                u.user_name,
                u.user_password,
                u.user_email,
                u.create_time,
                ur.role_id
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        WHERE u.id = #{id}
    </select>
    <!--<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        SELECT
            u.id,
            u.user_name,
            u.user_password,
            u.user_email,
            u.create_time,
            r.id role_id,
            r.role_name role_role_name,
            r.enabled role_enabled,
            r.create_by role_create_by,
            r.create_time role_create_time
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
    </select>-->
    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
        SELECT  u.id,
                u.user_name,
                u.user_password,
                u.user_email,
                u.create_time,
                r.id role_id,
                r.role_name role_role_name,
                r.enabled role_enabled,
                r.create_by role_create_by,
                r.create_time role_create_time,
                p.id role_privilege_id,
                p.privilege_name role_privilege_privilege_name,
                p.privilege_url role_privilege_privilege_url
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        INNER JOIN sys_role r ON ur.role_id = r.id
        INNER JOIN sys_role_privilege rp ON rp.role_id = r.id
        INNER JOIN sys_privilege p ON p.id = rp.privilege_id
    </select>
    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
        SELECT
              u.id,
              u.user_name,
              u.user_password,
              u.user_email,
              u.create_time
        FROM sys_user u
        WHERE u.id = #{id}
    </select>
    <select id="selectUserById" statementType="CALLABLE" useCache="false">
        {CALL select_user_by_id(
          #{id,mode=IN},
          #{userName,mode=OUT,jdbcType=VARCHAR},
          #{userPassword,mode=OUT,jdbcType=VARCHAR},
          #{userEmail,mode=OUT,jdbcType=VARCHAR},
          #{userInfo,mode=OUT,jdbcType=VARCHAR},
          #{headImg,mode=OUT,jdbcType=BLOB,javaType=_byte[]},
          #{createTime,mode=OUT,jdbcType=TIMESTAMP}
        )}
    </select>
    <select id="selectUserPage" statementType="CALLABLE" useCache="false"
            resultMap="sysUserMap">
        {CALL select_user_page(
        #{userName,mode=IN},
        #{offset,mode=IN},
        #{limit,mode=IN},
        #{total,mode=OUT,jdbcType=BIGINT}
        )}
    </select>
    <insert id="insertUserAndRoles" statementType="CALLABLE">
        {CALL insert_user_and_roles(
          #{sysUser.id,mode=OUT,jdbcType=BIGINT},
          #{sysUser.userName,mode=IN},
          #{sysUser.userPassword,mode=IN},
          #{sysUser.userEmail,mode=IN},
          #{sysUser.userInfo,mode=IN},
          #{sysUser.headImg,mode=IN,jdbcType=BLOB},
          #{sysUser.createTime,mode=OUT,jdbcType=TIMESTAMP},
          #{roleIds,mode=IN}
        )}
    </insert>
    <delete id="deleteUserById" statementType="CALLABLE">
        {CALL delete_user_by_id(#{id,mode=IN})}
    </delete>
</mapper>